import logging
from flask import Flask, request, jsonify
import hashlib
import uuid
import requests
import os
import redis

# Configure logging
logging.basicConfig(level=logging.DEBUG)
logger = logging.getLogger(__name__)

app = Flask(__name__)

# Redis Configuration
REDIS_HOST = os.environ.get("REDIS_HOST", "redis")
REDIS_PORT = int(os.environ.get("REDIS_PORT", 6379))
redis_client = redis.Redis(host=REDIS_HOST, port=REDIS_PORT, db=0)
# Vault Configuration
VAULT_ADDRESS = os.environ.get("VAULT_ADDRESS", "http://vault:8200")

@app.route('/get_challenge', methods=['POST'])
def get_challenge():
    """
    Endpoint to generate a CHAP challenge for a MAC address.

    This endpoint generates a CHAP (Challenge-Handshake Authentication Protocol) challenge for a given MAC address.
    The challenge is generated as a UUID (Universally Unique Identifier), and it is stored in Redis alongside
    the hashed combination of the stored password, the generated challenge, and the code hash retrieved from Vault.
    The stored challenge has a 2-minute expiration.

    Request JSON Payload:
    {
        "mac_address": "MAC_ADDRESS"
    }

    Response:
    {
        "challenge": "CHALLENGE_UUID"
    }
    """
    try:
        data = request.get_json()
        mac_address = data.get('mac_address')
        vault_token = _get_vault_token()
        stored_password = _get_stored_password(mac_address, vault_token)
        code_hash = _get_code_hash(mac_address, vault_token)

        challenge = str(uuid.uuid4())  # Generate challenge

        # Store the CHAP challenge result in Redis with a 2-minute expiration
        redis_key = f"{mac_address}_challenge"
        redis_client.set(redis_key, hashlib.sha256((stored_password + challenge + code_hash).encode()).hexdigest(), ex=120)
        
        # Log the challenge and generated UUID
        logger.info(f"Challenge generated for MAC {mac_address}: {challenge}")

        return jsonify(challenge=challenge), 200
    except Exception as e:
        logger.error(f"Error in 'get_challenge' route: {str(e)}")
        return jsonify(message=str(e)), 500

@app.route('/authenticate', methods=['POST'])
def authenticate():
    """
    Endpoint to authenticate a CHAP response for a MAC address.

    This endpoint is used to authenticate a client's CHAP (Challenge-Handshake Authentication Protocol) response.
    The client sends their MAC address and the CHAP response they calculated based on the challenge previously
    generated by the server. The server retrieves the stored challenge, validates the response, and if successful,
    generates a session UUID and stores it in Redis with a 1-hour expiration.

    Request JSON Payload:
    {
        "mac_address": "MAC_ADDRESS",
        "client_response": "CHAP_RESPONSE"
    }

    Response:
    {
        "message": "Authentication successful",
        "session_id": "SESSION_UUID"
    }
    or
    {
        "message": "Authentication failed"
    }
    """
    try:
        data = request.get_json()
        mac_address = data.get('mac_address')
        client_response = data.get('client_response')
        
        # Retrieve the password + challenge from Redis
        redis_key = f"{mac_address}_challenge"
        stored_result = redis_client.get(redis_key)

        # Delete the challenge key from Redis regardless of authentication outcome
        redis_client.delete(redis_key)
        if stored_result:
            expected_response = stored_result.decode('utf-8')
            if client_response == expected_response:
                # Generate a unique UUID for the session
                session_uuid = str(uuid.uuid4())
                # Store authenticated session UUID in Redis with a 1-hour expiration
                redis_session_key = f"{mac_address}_session"
                redis_client.set(redis_session_key, session_uuid, ex=3600)
                logger.info(f"Authentication successful for MAC {mac_address}. Session ID: {session_uuid}")
                return jsonify(message='Authentication successful', session_id=session_uuid), 200
            else:
                logger.info(f"Authentication failed for MAC {mac_address}")
                return jsonify(message='Authentication failed'), 401
        else:
            logger.warning(f"Challenge not found for MAC {mac_address}")
            return jsonify(message='Challenge not found'), 404
    except Exception as e:
        logger.error(f"Error in 'authenticate' route: {str(e)}")
        return jsonify(message=str(e)), 500
    

def _get_vault_token():
    """
    Helper function to retrieve the Vault token from Redis.

    This function retrieves the Vault root token from Redis, which is used for authentication
    when making requests to Vault for retrieving secrets.

    Returns:
        str: The Vault root token.
        
    Raises:
        Exception: If the Vault token is not found in Redis or an error occurs during retrieval.
    """
    try:
        token = redis_client.get("vault_root_token")
        if token:
            return token.decode("utf-8")
        else:
            raise Exception("Vault token not found in Redis")
    except Exception as e:
        raise Exception("Error retrieving Vault token from Redis", e)
    

def _get_stored_password(mac_address, vault_token):
    """
    Helper function to retrieve the stored password for a MAC address from Vault.

    This function makes a request to Vault to retrieve the stored password for a MAC address.
    It requires the Vault root token for authentication.

    Args:
        mac_address (str): The MAC address of the device.
        vault_token (str): The Vault root token for authentication.

    Returns:
        str: The stored password for the MAC address.

    Raises:
        Exception: If an error occurs during retrieval.
    """
    try:
        response = requests.get(
            f"{VAULT_ADDRESS}/v1/secret/data/users/{mac_address}",
            headers={"X-Vault-Token": vault_token}
        )
        response_json = response.json()
        stored_password = response_json["data"]["password"]
        return stored_password
    except Exception as e:
        raise Exception("Error retrieving stored password from Vault", e)


def _get_code_hash(mac_address, vault_token):
    """
    Helper function to retrieve the code hash for a MAC address from Vault.

    This function makes a request to Vault to retrieve the code hash associated with a MAC address.
    It requires the Vault root token for authentication.

    Args:
        mac_address (str): The MAC address of the device.
        vault_token (str): The Vault root token for authentication.

    Returns:
        str: The code hash associated with the MAC address.

    Raises:
        Exception: If an error occurs during retrieval.
    """
    try:
        response = requests.get(
            f"{VAULT_ADDRESS}/v1/secret/data/fog_nodes/{mac_address}",
            headers={"X-Vault-Token": vault_token}
        )
        response_json = response.json()
        code_hash = response_json["data"]["code_hash"]
        return code_hash
    except Exception as e:
        raise Exception("Error retrieving code hash from Vault", e)


if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
