version: "3"
# Services Foundation Layer:
# This layer provides essential backend services required for the Smart Highway Net platform.

# Volumes
volumes:
  zookeeper-data:
    driver: local
  zookeeper-log:
    driver: local
  kafka-data:
    driver: local
  redis-data:
    driver: local

services:
  # Apache ZooKeeper is an effort to develop and maintain an open-source server which enables highly reliable distributed coordination.
  zookeeper:
    image: confluentinc/cp-zookeeper
    container_name: zookeeper
    # ZooKeeper is designed to "fail-fast", so it is important to allow it to
    # restart automatically.
    restart: unless-stopped
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-log:/var/lib/zookeeper/log
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    networks:
      - smart-highway-net 

  # Apache Kafka is an open-source distributed event streaming platform used 
  # by thousands of companies for high-performance data pipelines, 
  # streaming analytics, data integration, and mission-critical applications.
  kafka:
    image: confluentinc/cp-kafka
    container_name: kafka
    volumes:
      - kafka-data:/var/lib/kafka
    ports:
      - "9093:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_NUM_PARTITIONS=1
      - KAFKA_COMPRESSION_TYPE=gzip
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR=1
      - KAFKA_TRANSACTION_STATE_LOG_MIN_ISR=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181 # Required. Instructs Kafka how to get in touch with ZooKeeper.
      - KAFKA_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:29094,PLAINTEXT_HOST://localhost:9093
      - KAFKA_LISTENERS=PLAINTEXT://0.0.0.0:29094,PLAINTEXT_HOST://0.0.0.0:9092
      - KAFKA_AUTO_CREATE_TOPICS_ENABLE=true
    links:
      - zookeeper
    depends_on:
      - zookeeper
    networks:
      - smart-highway-net 

  # Manage & view data inside your Apache Kafka Â® cluster
  akhq:
    image: tchiotludo/akhq
    container_name: akhq
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:29094"
    ports:
      - 8088:8080
    networks:
      - smart-highway-net 

  # The Kafka REST Proxy provides a RESTful interface to a Kafka cluster.
  # It makes it easy to produce and consume messages, view the state
  # of the cluster, and perform administrative actions without using
  # the native Kafka protocol or clients.
  # https://github.com/confluentinc/kafka-rest
  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:latest
    container_name: kafka-rest-proxy
    environment:
      # Specifies the ZooKeeper connection string. This service connects
      # to ZooKeeper so that it can broadcast its endpoints as well as
      # react to the dynamic topology of the Kafka cluster.
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      # The address on which Kafka REST will listen for API requests.
      KAFKA_REST_LISTENERS: http://0.0.0.0:8090/
      # Required. This is the hostname used to generate absolute URLs in responses.
      # It defaults to the Java canonical hostname for the container, which might
      # not be resolvable in a Docker environment.
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      # The list of Kafka brokers to connect to. This is only used for bootstrapping,
      # the addresses provided here are used to initially connect to the cluster,
      # after which the cluster will dynamically change. Thanks, ZooKeeper!
      KAFKA_REST_BOOTSTRAP_SERVERS: kafka:29094
    # Kafka REST relies upon Kafka, ZooKeeper
    # This will instruct docker to wait until those services are up
    # before attempting to start Kafka REST.
    ports:
      - "8090:8090"
    links:
      - zookeeper
      - kafka
    depends_on:
      - zookeeper
      - kafka
    networks:
      - smart-highway-net 

  
  # Eclipse Mosquitto MQTT broker for message communication
  mosquitto:
    image: eclipse-mosquitto:2.0.14
    restart: on-failure
    container_name: mosquitto
    env_file:
      - ./.env
    volumes:
      - ./mosquitto/mosquitto.conf:/mosquitto/config/mosquitto.conf
    environment:
      - MOSQUITTO_USERNAME=${MQTT_BROKER_USERNAME}
      - MOSQUITTO_PASSWORD=${MQTT_BROKER_PASSWORD}
    ports:
      - "1883:1883"
    networks:
      - smart-highway-net

  # HashiCorp Vault for managing secrets and protecting sensitive data
  vault:
    image: vault:1.8.4
    restart: on-failure
    container_name: vault
    volumes:
      - ./vault/config:/vault/config
      - ./vault/policies:/vault/policies
      - ./vault/data:/vault/data
    ports:
      - 8200:8200
    environment:
      - VAULT_ADDR=http://0.0.0.0:8200
      - VAULT_API_ADDR=http://0.0.0.0:8200
      - VAULT_ADDRESS=http://0.0.0.0:8200
    cap_add:
      - IPC_LOCK
    command: vault server -config=/vault/config/vault.json
    networks:
      - smart-highway-net 

  # Redis container for data caching
  redis:
    image: redis:latest
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - smart-highway-net

networks:
  smart-highway-net:
    driver: bridge
